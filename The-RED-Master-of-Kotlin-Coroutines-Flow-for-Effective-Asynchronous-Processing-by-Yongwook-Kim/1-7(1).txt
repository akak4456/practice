import kotlin.system.*
import kotlinx.coroutines.*

suspend fun massiveRun(action: suspend () -> Unit) {
    val n = 100
    val k = 1000
    
   val elapsed = measureTimeMillis {
       coroutineScope {
           repeat(n) {
               launch {
               	repeat(k) {action()}
               }
           }
       }
   }
   println("${elapsed} ms 동안 ${n*k}개의 액션을 수행했습니다.")
} 

var counter = 0

fun main() = runBlocking {
    withContext(Dispatchers.Default) {
        massiveRun {
            counter++
        }
    }
    println("Counter = $counter")
}

import kotlin.system.*
import kotlinx.coroutines.*

suspend fun massiveRun(action: suspend () -> Unit) {
    val n = 100
    val k = 1000
    
   val elapsed = measureTimeMillis {
       coroutineScope {
           repeat(n) {
               launch {
               	repeat(k) {action()}
               }
           }
       }
   }
   println("${elapsed} ms 동안 ${n*k}개의 액션을 수행했습니다.")
} 

@Volatile
var counter = 0

fun main() = runBlocking {
    withContext(Dispatchers.Default) {
        massiveRun {
            counter++
        }
    }
    println("Counter = $counter")
}

import java.util.concurrent.atomic.*
import kotlin.system.*
import kotlinx.coroutines.*

suspend fun massiveRun(action: suspend () -> Unit) {
    val n = 100
    val k = 1000
    
   val elapsed = measureTimeMillis {
       coroutineScope {
           repeat(n) {
               launch {
               	repeat(k) {action()}
               }
           }
       }
   }
   println("${elapsed} ms 동안 ${n*k}개의 액션을 수행했습니다.")
} 

var counter = AtomicInteger()

fun main() = runBlocking {
    withContext(Dispatchers.Default) {
        massiveRun {
            counter.incrementAndGet()
        }
    }
    println("Counter = $counter")
}

import java.util.concurrent.atomic.*
import kotlin.system.*
import kotlinx.coroutines.*

suspend fun massiveRun(action: suspend () -> Unit) {
    val n = 100
    val k = 1000
    
   val elapsed = measureTimeMillis {
       coroutineScope {
           repeat(n) {
               launch {
               	repeat(k) {action()}
               }
           }
       }
   }
   println("${elapsed} ms 동안 ${n*k}개의 액션을 수행했습니다.")
} 

var counter = 0
val counterContext = newSingleThreadContext("CounterContext")

fun main() = runBlocking {
    withContext(counterContext) {
        massiveRun {
            counter++
        }
    }
    println("Counter = $counter")
}