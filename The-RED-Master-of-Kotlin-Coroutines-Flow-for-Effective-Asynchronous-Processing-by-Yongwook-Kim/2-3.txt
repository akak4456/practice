import kotlinx.coroutines.*
import kotlinx.coroutines.flow.*

fun log(msg: String) = println("[${Thread.currentThread().name}] $msg")

fun simple(): Flow<Int> = flow {
    log("flow를 시작합니다.")
    for(i in 1..10) {
        emit(i)
    }
}

fun main() = runBlocking<Unit> {
    launch(Dispatchers.IO){
        simple()
        	.collect {value -> log("$value 를 받음")}
    }
}

import kotlinx.coroutines.*
import kotlinx.coroutines.flow.*

fun log(msg: String) = println("[${Thread.currentThread().name}] $msg")

fun simple(): Flow<Int> = flow {
    withContext(Dispatchers.Default) {
        for(i in 1..10) {
            delay(100L)
            emit(i)
        }
	}
}

fun main() = runBlocking<Unit> {
    launch(Dispatchers.IO){
        simple()
        	.collect {value -> log("$value 를 받음")}
    }
}

import kotlinx.coroutines.*
import kotlinx.coroutines.flow.*

fun log(msg: String) = println("[${Thread.currentThread().name}] $msg")

fun simple(): Flow<Int> = flow {
        for(i in 1..10) {
            delay(100L)
            log("값 ${i}를 emit 합니다.")
            emit(i)
        }
}.flowOn(Dispatchers.Default)

fun main() = runBlocking<Unit> {
    launch(Dispatchers.IO){
        simple()
        	.collect {value -> log("$value 를 받음")}
    }
}