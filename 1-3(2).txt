import kotlinx.coroutines.*

suspend fun doOneTwoThree() = coroutineScope {
    val job1 = launch {
        try {
            println("launch1: ${Thread.currentThread().name}")
            delay(1000L)
            println("3!")
        } finally {
            println("job1 is finishing!")
            //파일을 닫아주는 코드
        }
    }
    
    val job2 = launch {
        try {
            println("launch2: ${Thread.currentThread().name}")
            delay(1000L)
            println("2!")
        } finally {
            println("job2 is finishing")
            //소켓을 닫아주는 코드
        }
    }
    
    val job3 = launch {
        try {
            println("launch3: ${Thread.currentThread().name}")
            delay(1000L)
            println("2!")
        } finally {
            println("job3 is finishing!")
        }
    }
    
   	delay(800L)
    job1.cancel()
    job2.cancel()
    job3.cancel()
}

fun main() = runBlocking {
    doOneTwoThree()
}

import kotlinx.coroutines.*

suspend fun doCount() = coroutineScope {
    val job1 = launch(Dispatchers.Default) {
        try {
            var i = 1
            var nextTime = System.currentTimeMillis() + 100L

            while(i <= 10 && isActive) {
                val currentTime = System.currentTimeMillis()
                if(currentTime >= nextTime) {
                    println(i)
                    nextTime = currentTime + 100L
                    i++
                }
            }
        } finally {
            println("job1 finish")
        }
    }
}

fun main() = runBlocking {
   	withTimeout(500L) {
        doCount()
    }
}

import kotlinx.coroutines.*

suspend fun doCount() = coroutineScope {
    val job1 = launch(Dispatchers.Default) {
            var i = 1
            var nextTime = System.currentTimeMillis() + 100L

            while(i <= 10 && isActive) {
                val currentTime = System.currentTimeMillis()
                if(currentTime >= nextTime) {
                    println(i)
                    nextTime = currentTime + 100L
                    i++
                }
            }

         
    }
}

fun main() = runBlocking {
   	val result = withTimeoutOrNull(2000L) {
        doCount()
        true
    } ?: false
    println(result)
}
