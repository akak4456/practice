import kotlinx.coroutines.*
import kotlinx.coroutines.channels.*

fun CoroutineScope.produceNumbers() = produce<Int> {
    var x = 1
    while(true) {
        send(x++)
    }
}

fun CoroutineScope.produceStringNumbers(numbers: ReceiveChannel<Int>): ReceiveChannel<String> = produce {
    for(i in numbers) {
        send("${i}!")
    }
}

fun main() = runBlocking<Unit> {
    val numbers = produceNumbers()
    val stringNumbers = produceStringNumbers(numbers)
    
    repeat(5){
        println(stringNumbers.receive())
    }
    println("완료")
    coroutineContext.cancelChildren()
}

import kotlinx.coroutines.*
import kotlinx.coroutines.channels.*

fun CoroutineScope.produceNumbers() = produce<Int> {
    var x = 1
    while(true) {
        send(x++)
    }
}

fun CoroutineScope.filterOdd(numbers: ReceiveChannel<Int>): ReceiveChannel<String> = produce {
    for(i in numbers) {
        if(i % 2 == 1){
            send("${i}!")
        }
    }
}

fun main() = runBlocking<Unit> {
    val numbers = produceNumbers()
    val oddNumbers = filterOdd(numbers)
    
    repeat(10){
        println(oddNumbers.receive())
    }
    println("완료")
    coroutineContext.cancelChildren()
}

import kotlinx.coroutines.*
import kotlinx.coroutines.channels.*

fun CoroutineScope.produceNumbers(start: Int) = produce<Int> {
    var x = start
    while(true) {
        send(x++)
    }
}

fun CoroutineScope.filter(numbers: ReceiveChannel<Int>, prime: Int): ReceiveChannel<Int> = produce {
    for(i in numbers) {
        if(i % prime != 0){
            send(i)
        }
    }
}

fun main() = runBlocking<Unit> {
    var numbers = produceNumbers(2)
    
    repeat(10){
        val prime = numbers.receive()
        println(prime)
        numbers = filter(numbers, prime)
    }
    println("완료")
    coroutineContext.cancelChildren()
}