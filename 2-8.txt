import kotlinx.coroutines.*
import kotlinx.coroutines.flow.*

fun simple(): Flow<Int> = (1..3).asFlow()

fun main() = runBlocking<Unit> {
    try {
        simple().collect {value -> println(value)}
    }finally {
        println("Done")
    }
}

import kotlinx.coroutines.*
import kotlinx.coroutines.flow.*

fun simple(): Flow<Int> = (1..3).asFlow()

fun main() = runBlocking<Unit> {
   simple()
   .onCompletion {println("Done")}
   .collect {value-> println(value)}
}

import kotlinx.coroutines.*
import kotlinx.coroutines.flow.*

fun simple():Flow<Int> = flow{
    emit(1)
    throw RuntimeException()
}

fun main() = runBlocking<Unit> {
    simple()
    .onCompletion {cause -> if(cause != null) println("Flow completed exceptionally")}
    .catch {cause -> println("Caught exception")}
    .collect {value -> println(value)}
}